{"version":3,"sources":["components/button/marvelButton.module.css","state.ts","utils/api.js","components/button/MarvelButton.tsx","components/character-details/CharactersDetails.jsx","components/comics-details/ComicsDetails.tsx","components/favourite/Favourite.tsx","components/hero-card/HeroCard.jsx","components/paginator/Paginator.jsx","components/home/Home.tsx","components/character-favourites/FavouritesCharacters.jsx","components/dashboard/Dashboard.tsx","components/search-bar/SearchBar.jsx","components/app/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","copyrightInfo","atom","key","default","searchTextState","displayedCharacters","favouritesCharacters","pagination","offset","limit","total","count","url","apiKey","process","initInfo","setCharacters","setCopyright","a","fetch","apiCall","json","result","data","results","copyright","attributionText","attributionHTML","setCharactersByQuery","setPagination","query","getCharacterDetails","characterId","MarvelButton","className","styles","button","onClick","props","onClickedAction","searchText","this","text","PureComponent","CharactersDetails","useState","undefined","characterDetails","setCharacterDetails","useRecoilState","favourites","setFavouritesCharacters","useEffect","id","match","params","then","details","length","some","e","alt","src","thumbnail","path","extension","ComicsDetails","Favourite","setState","selected","Provider","value","color","size","isSelected","Component","HeroCard","history","useHistory","useRecoilValue","push","heroId","heroName","imgUrl","heroDescription","toString","Paginator","pageCount","Math","round","paginationInfo","perPage","currentPage","paginationState","setPaginationState","console","log","JSON","stringify","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","forcePage","onPageChange","selectedPage","containerClassName","subContainerClassName","activeClassName","Home","characters","map","description","name","FavouritesCharacters","loaded","setLoaded","fullCharArray","setFullCharArray","promisesArray","charId","Promise","all","values","Dashboard","exact","component","NoMatch","SearchBar","setText","type","onChange","event","target","App","favs","heroes","setDisplayedCharacters","setPaginationInfo","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ca50bb66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"marvelButton_button__1Bdxb\"};","import { atom } from \"recoil\";\r\n\r\nconst initialSearchText = \"\";\r\n\r\nexport const copyrightInfo = atom({\r\n    key: 'copyright',\r\n    default: {},\r\n});\r\n\r\nexport const searchTextState = atom({\r\n    key: 'searchText',\r\n    default: initialSearchText,\r\n});\r\n\r\nexport const displayedCharacters = atom({\r\n    key: 'displayedCharacters',\r\n    default: [],\r\n});\r\n\r\nexport const favouritesCharacters = atom({\r\n    key: 'favouritesCharacters',\r\n    default: [],\r\n});\r\n\r\nexport const pagination = atom({\r\n    key: 'paginationInfo',\r\n    default: {\r\n        offset: 0,\r\n        limit: 0,\r\n        total: 0,\r\n        count: 0\r\n    },\r\n});","const urlDevelopment = `http://localhost:3004/characters`;\r\nconst urlProduction = `http://gateway.marvel.com/v1/public`;\r\n\r\nexport const url = urlProduction;\r\nexport const apiKey = `${process.env.REACT_APP_MARVEL_PUBLIC_API_KEY}`;\r\n\r\n\r\nexport const initInfo = async (setCharacters, setCopyright) => {\r\n  const apiCall = await fetch(`${url}/characters?apikey=${apiKey}`);\r\n  const result = await apiCall.json();\r\n  setCharacters(result.data.results);\r\n  setCopyright({\r\n    copyright: result.copyright,\r\n    attributionText: result.attributionText,\r\n    attributionHTML: result.attributionHTML\r\n  });\r\n};\r\n\r\nexport const setCharactersByQuery = async (setPagination, setCharacters, query) => {\r\n  const apiCall = await fetch(`${url}/characters?apikey=${apiKey}&nameStartsWith=${query}`);\r\n  const result = await apiCall.json();\r\n  debugger; // TODO aqui hay que meter la info de la oaginacion.\r\n  if (result.data) {\r\n    const {\r\n      offset,\r\n      limit,\r\n      total,\r\n      count\r\n    } = result.data;\r\n    if(setPagination) {\r\n      setPagination({\r\n        offset,\r\n        limit,\r\n        total,\r\n        count\r\n      });\r\n    }\r\n    setCharacters(result.data.results);\r\n  } else {\r\n    setCharacters([]);\r\n  }\r\n};\r\n\r\nexport const getCharacterDetails = async (characterId) => {\r\n  const apiCall = await fetch(`${url}/characters/${characterId}?apikey=${apiKey}`);\r\n  const result = await apiCall.json();\r\n  return result.data.results;\r\n};\r\n\r\n\r\nexport const getComics = (options) => {};\r\nexport const getCreator = (options) => {};\r\nexport const getSeries = (options) => {};\r\nexport const getStories = (options) => {};\r\nexport const getEvents = (options) => {};","import React, { PureComponent } from 'react';\r\nimport { setCharactersByQuery } from '../../utils/api';\r\nimport styles from './marvelButton.module.css';\r\n\r\ntype ButtonProps = {\r\n    text: string,\r\n    searchText: string,\r\n    onClickedAction: any,\r\n    pagination: Function\r\n}\r\n\r\nexport default class MarvelButton extends PureComponent<ButtonProps> {\r\n\r\n    render() {\r\n        return (\r\n            <span className={styles.button} onClick={() => {\r\n                setCharactersByQuery(this.props.pagination, this.props.onClickedAction, this.props.searchText)\r\n            }}>\r\n                {this.props.text}\r\n            </span>\r\n        )\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { getCharacterDetails } from '../../utils/api'\r\nimport MarvelButton from \"./../button/MarvelButton\"\r\nimport { useRecoilState } from 'recoil';\r\nimport { favouritesCharacters } from \"../../state\";\r\n\r\nimport \"./CharactersDetails.css\"\r\n\r\nexport const CharactersDetails = (props) => {\r\n\r\n    const [characterDetails, setCharacterDetails] = useState(undefined);\r\n    const [favourites, setFavouritesCharacters] = useRecoilState(favouritesCharacters);\r\n\r\n    useEffect(() => {\r\n        const { id } = props.match.params\r\n        getCharacterDetails(id).then(details => {\r\n            if (details && details.length > 0) {\r\n                setCharacterDetails(details[0]);\r\n            }\r\n        })\r\n    }, []); //\r\n\r\n    if (characterDetails) {\r\n        return (\r\n            <div className=\"characterDetailsContainer\">\r\n                <MarvelButton text=\"add to favourites\" onClickedAction={() => {\r\n                    //Add only once.\r\n                    if (!favourites.some(e => e === characterDetails.id)) {\r\n                        setFavouritesCharacters([...favourites, characterDetails.id])\r\n                    }\r\n                }}></MarvelButton>\r\n                <img className=\"highResolution\" alt=\"\" src={`${characterDetails.thumbnail.path}.${characterDetails.thumbnail.extension}`}></img>\r\n                <span>CHARACTER DETAILSSSSSSSSSSSS</span>\r\n            </div>);\r\n    }\r\n    return null;\r\n\r\n}","import React from 'react'\r\n\r\nexport const ComicsDetails = () => {\r\n    return (\r\n        <div>\r\n            ComicsDetails\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { AiFillStar, AiOutlineStar } from 'react-icons/ai';\r\nimport { IconContext } from \"react-icons\";\r\nimport \"./Favourite.css\"\r\ntype FavouriteState = {\r\n  selected: boolean\r\n}\r\n\r\nexport class Favourite extends Component<{ isSelected: false }, FavouriteState> {\r\n\r\n  // Before the component mounts, we initialise our state\r\n  componentWillMount() {\r\n    this.setState({\r\n      selected: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"iconContainer\">\r\n      <IconContext.Provider value={{ color: \"yellow\", className: \"icon\", size: \"2rem\"}}>\r\n        {this.props.isSelected ? <AiFillStar /> : <AiOutlineStar />}\r\n      </IconContext.Provider>\r\n    </div>\r\n  }\r\n}","\r\nimport React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilValue } from 'recoil';\r\nimport { favouritesCharacters } from \"../../state\";\r\nimport { Favourite } from \"./../favourite/Favourite\";\r\nimport './HeroCard.css';\r\n\r\nexport const HeroCard = (props) => {\r\n\r\n    const history = useHistory();\r\n    const favourites = useRecoilValue(favouritesCharacters);\r\n\r\n    return (\r\n        <div className=\"card\" onClick={() => {\r\n            history.push(`/characters/${props.heroId}`);\r\n        }}>\r\n            <span className=\"card-title\">{props.heroName}</span>\r\n            <div className=\"image-container\">\r\n                <img src={props.imgUrl}\r\n                    alt={props.heroName}\r\n                    className=\"card-thumb-frame__thumbnail\"></img>\r\n\r\n            </div>\r\n            <span className=\"card-description\">{props.heroDescription}</span>\r\n            <span className=\"card-comics-count\"></span>\r\n            <span className=\"card-series-count\"></span>\r\n            <Favourite isSelected={favourites.some(e => e.toString() === props.heroId.toString())}></Favourite>\r\n        </div>\r\n    )\r\n}\r\n","import { default as React, useEffect, useState } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport { useRecoilState } from 'recoil';\r\nimport { displayedCharacters, pagination } from '../../state';\r\nimport { setCharactersByQuery } from '../../utils/api';\r\nimport \"./Paginator.css\";\r\n\r\nconst Paginator = (props) => {\r\n    const pageCount = Math.round(props.paginationInfo.total / 20);\r\n    const [characters, setCharacters] = useRecoilState(displayedCharacters);\r\n    const [paginationInfo, setPagination] = useRecoilState(pagination);\r\n\r\n    const [paginationState, setPaginationState] = useState({\r\n        offset: props.paginationInfo.offset,\r\n        data: props.data,\r\n        perPage: 20,\r\n        currentPage: 0\r\n    });\r\n\r\n    console.log(\"paginationState\" + JSON.stringify(paginationState));\r\n\r\n    useEffect(() => {\r\n        //setCharactersByQuery(setPagination, setCharacters, \"\" + \"&limit=20&offset=20\")\r\n        console.log('TODO CALLING REST MARVEL API', paginationState);\r\n     }, [paginationState]);\r\n\r\n\r\n    const handlePageClick = (e) => {\r\n        debugger;\r\n        const selectedPage = e.selected;\r\n        const offset = selectedPage * paginationState.perPage;\r\n\r\n        setPaginationState({\r\n            ...paginationState,\r\n            currentPage: selectedPage,\r\n            offset: offset\r\n        });\r\n    }\r\n\r\n    return <div className=\"paginatorContainer\">\r\n        <ReactPaginate\r\n            previousLabel={'previous'}\r\n            nextLabel={'next'}\r\n            breakLabel={'...'}\r\n            breakClassName={'break-me'}\r\n            pageCount={pageCount}\r\n            marginPagesDisplayed={2}\r\n            pageRangeDisplayed={5}\r\n            forcePage={paginationState.currentPage}\r\n            onPageChange={handlePageClick}\r\n            containerClassName={'pagination'}\r\n            subContainerClassName={'pages pagination'}\r\n            activeClassName={'active'}\r\n        />\r\n    </div>\r\n\r\n}\r\n\r\nexport default Paginator;","import { default as React, useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { displayedCharacters, copyrightInfo, pagination } from '../../state';\r\nimport { HeroCard } from '../hero-card/HeroCard';\r\nimport Paginator from \"../paginator/Paginator\"\r\nimport './Home.css';\r\nimport { initInfo } from '../../utils/api';\r\n\r\nexport const Home = () => {\r\n\r\n    const [characters, setCharacters] = useRecoilState(displayedCharacters);\r\n    const [copyright, setCopyright] = useRecoilState(copyrightInfo);\r\n    const paginationInfo = useRecoilValue(pagination);\r\n\r\n    useEffect(() => {\r\n        initInfo(setCharacters, setCopyright);\r\n    }, []); // passing an empty array as the second argument to useEffect makes it only run on mount and unmount \r\n\r\n    if (characters && characters.length > 0) {\r\n        return (\r\n            <div>\r\n                <Paginator data={characters} paginationInfo={paginationInfo}></Paginator>\r\n                <div className=\"home\">\r\n                    {characters.map((e: any) => {\r\n                        return <HeroCard\r\n                            heroDescription={e.description}\r\n                            key={e.id.toString()}\r\n                            heroName={e.name}\r\n                            heroId={e.id.toString()}\r\n                            imgUrl={`${e.thumbnail.path}.${e.thumbnail.extension}`}></HeroCard>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div className=\"notFound\"><span className=\"verticalCenter\">Not found</span></div>\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useRecoilValue } from 'recoil';\r\nimport { HeroCard } from '../hero-card/HeroCard';\r\nimport { url, apiKey } from \"../../utils/api\"\r\nimport { favouritesCharacters } from \"../../state\";\r\nimport './FavouritesCharacters.css';\r\n\r\nexport const FavouritesCharacters = () => {\r\n\r\n    const favourites = useRecoilValue(favouritesCharacters);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [fullCharArray, setFullCharArray] = useState([]);\r\n    const promisesArray = [];\r\n\r\n    useEffect(() => {\r\n        favourites.map(charId => {\r\n            promisesArray.push(fetch(`${url}/characters/${charId}?apikey=${apiKey}`).then(result => {\r\n                const obtained = result.json();\r\n                return obtained;\r\n            }));\r\n        });\r\n        Promise.all(promisesArray).then((values) => {\r\n            setFullCharArray(values.map(e => e.data.results[0]));\r\n            setLoaded(true);\r\n        })\r\n    }, []); // passing an empty array as the second argument to useEffect makes it only run on mount and unmount \r\n\r\n    if (loaded && fullCharArray && fullCharArray.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"favouritesContainer\">\r\n                    {fullCharArray.map((e) => {\r\n                        return <HeroCard\r\n                            heroDescription={e.description}\r\n                            key={e.id.toString()}\r\n                            heroName={e.name}\r\n                            heroId={e.id.toString()}\r\n                            imgUrl={`${e.thumbnail.path}.${e.thumbnail.extension}`}></HeroCard>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        if (fullCharArray && fullCharArray && fullCharArray.length === 0)\r\n            return <div className=\"notFound\"><span className=\"verticalCenter\">Not favourites yet</span></div>\r\n        return <div className=\"notFound\"><span className=\"verticalCenter\">Loading ... {loaded.toString()}</span></div>\r\n    }\r\n}","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { CharactersDetails } from \"./../character-details/CharactersDetails\";\r\nimport { ComicsDetails } from \"./../comics-details/ComicsDetails\";\r\nimport { Home } from \"./../home/Home\";\r\nimport { FavouritesCharacters } from \"../character-favourites/FavouritesCharacters\";\r\n\r\nconst Dashboard: React.FC = () => {\r\n    return <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/characters/:id\" component={CharactersDetails} />\r\n            <Route path=\"/favourites\" component={FavouritesCharacters} />\r\n            <Route path=\"/comics\" component={ComicsDetails} />\r\n        <Route path=\"*\">\r\n            <NoMatch></NoMatch>\r\n        </Route>\r\n    </Switch>\r\n}\r\n\r\nexport default Dashboard;\r\n\r\nconst NoMatch = () => {\r\n    return <span>NOT FOUND</span>\r\n}","import React from 'react';\r\nimport { useRecoilState } from \"recoil\";\r\nimport { searchTextState } from \"../../state\";\r\n\r\nconst SearchBar = (props) => {\r\n\r\n    const [text, setText] = useRecoilState(searchTextState);\r\n\r\n    const onChange = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n\r\n    return (\r\n        <input type=\"text\" value={text} onChange={onChange}>\r\n        </input>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { copyrightInfo, displayedCharacters, searchTextState, favouritesCharacters, pagination } from \"../../state\";\r\nimport MarvelButton from '../button/MarvelButton';\r\nimport Dashboard from '../dashboard/Dashboard';\r\nimport SearchBar from '../search-bar/SearchBar';\r\nimport './App.css';\r\n\r\n\r\nconst App = () => {\r\n\r\n  const history = useHistory();\r\n  const [text, setText] = useRecoilState(searchTextState);\r\n  const copyright = useRecoilValue(copyrightInfo);\r\n  const favs = useRecoilValue(favouritesCharacters);\r\n\r\n  const [heroes, setDisplayedCharacters] = useRecoilState(displayedCharacters);\r\n  const [paginationInfo, setPaginationInfo] = useRecoilState(pagination);\r\n\r\n  const _navigateHome = () => {\r\n    setDisplayedCharacters(heroes);\r\n    setText(\"\");\r\n    history.push(`/`);\r\n  }\r\n\r\n  const _navigateFavourites = () => {\r\n    setText(\"\");\r\n    history.push(`/favourites`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <img className=\"logo\" src=\"/1920px-MarvelLogo.svg.png\" onClick={_navigateHome}></img>\r\n\r\n        <SearchBar text={text}></SearchBar>\r\n        \r\n        <MarvelButton text=\"search\" searchText={text} onClickedAction={setDisplayedCharacters}\r\n          pagination={setPaginationInfo}></MarvelButton>\r\n\r\n        {favs && favs.length ? <span className=\"favourites\" onClick={_navigateFavourites}>❤️</span> : ''}\r\n\r\n      </header>\r\n      <Dashboard></Dashboard>\r\n      <footer className=\"App-footer\">\r\n        <span dangerouslySetInnerHTML={{ __html: copyright.attributionHTML }}></span>\r\n        <span>{copyright.copyright}</span>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { RecoilRoot } from \"recoil\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <Router>\n      <App />\n    </Router>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}